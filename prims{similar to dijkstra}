   static class Edge {
      int src;
      int nbr;
      int wt;

      Edge(int src, int nbr, int wt) {
         this.src = src;
         this.nbr = nbr;
         this.wt = wt;
      }
   }

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         int wt = Integer.parseInt(parts[2]);
         graph[v1].add(new Edge(v1, v2, wt));
         graph[v2].add(new Edge(v2, v1, wt));
      }

      // write your code here
      PriorityQueue<pair> pq=new PriorityQueue<>();
      pq.add(new pair(0,-1,0));
      boolean [] vis=new boolean[vtces];
      while(pq.size()>0){
         pair rp=pq.remove();
         if(vis[rp.src]==true){
            continue;
         }
         vis[rp.src]=true;
         if(rp.par!=-1){
            System.out.println("["+rp.src+"-"+rp.par+"@"+rp.wt+"]");
         }
         for(var e:graph[rp.src]){
            if(vis[e.nbr]==false){
               pq.add(new pair(e.nbr, e.src ,e.wt ));
            }
         }

      }
   }
  static  class pair implements Comparable<pair>{
   int src;
   int par;
   int wt;
   pair(int s,int p,int w){
      this.src=s;
      this.par=p;
      this.wt=w;
   }
 public int compareTo(pair o){
      return this.wt-(o.wt);
   }

}
